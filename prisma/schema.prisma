datasource db {
  provider          = "postgresql"
  url               = env("SUPABASE_DATABASE_URL")
  directUrl         = env("SUPABASE_DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

model User {
  user_id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  quaver_id Int @unique
  hash String
  username String
  avatar String
  ratings Rating[]
  submittedMaps Map[]
  badges Badge[]
  role Role @default(Player)
  xp Float @default (0)
  level Int @default (0)
  prestige Int @default (0)
}

model Map {
    map_id Int @id @default(autoincrement())
    submittedBy User @relation(fields: [submittedBy_id], references: [user_id])
    quaver_id Int @unique
    submittedBy_id Int
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    banned Boolean @default(false)
    baseline Boolean @default(false)
    category Category @default(Reading)
    mapQua Json
    totalRating Float
    ratings Rating[]
    inTournaments Tournament[] @default([])
}

model Rating {
    rating_id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    quality Quality @default(Decent)
    user User @relation(fields: [user_id], references: [user_id])
    map Map @relation(fields: [map_id], references: [map_id])
    user_id Int
    map_id Int
    rating Int
}

model Badge {
    badge_id Int @id @default(autoincrement())
    text String
    users User[]
}

model Metric {
    metric_id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    userCount Int @default(0)
    mapCount Int @default(0)
    ratingCount Int @default(0)
    scoreCount Int @default(0)
    categoryMapCount Int[] @default([0, 0, 0, 0, 0])
}

enum Category {
    Reading
    Hybrid
    Memory
    Reverse
    Splitscroll
}

enum Quality {
    Bad
    Decent
    Great 
    Brilliant
}

enum Role {
    Player
    Contributor
    Administrator
}

enum Tournament {
    QOT1
    QOT2
    QOT3
    QOT4
    ESVT1
    ESVT2
}
